/* Copyright (c) 2019-2020, Sascha Willems
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 the "License";
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#version 460
#extension GL_EXT_ray_tracing : enable

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform CameraProperties 
{
	mat4 viewInverse;
	mat4 projInverse;
} cam;

#include "struct.glsl"
#include "constants.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

void main()
{
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	vec2       d           = inUV * 2.0 - 1.0;

	vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
	vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);
	
	vec3 summedPixelColor = vec3(0.0);
	
	int MAX_DEPTH = constants.maxDepth;

	float tmin = 0.001;
	float tmax = 1e32;

	prd.rayOrigin   = origin.xyz;
	prd.rayDir      = direction.xyz;
	prd.radiance    = vec3(0.0);
	prd.attenuation = vec3(1.0);
	prd.done        = 0;
	prd.rngState = constants.time * gl_LaunchIDEXT.x * gl_LaunchIDEXT.y;  // Initial seed

	for (int depth = 0; depth < MAX_DEPTH; depth++)
	{

		traceRayEXT(topLevelAS, // acceleration structure
			gl_RayFlagsOpaqueEXT, // rayFlags
			0xFF,              // cullMask
			0,                 // sbtRecordOffset
			0,                 // sbtRecordStride
			0,                 // missIndex
			prd.rayOrigin,     // ray origin
			tmin,              // ray min range
			prd.rayDir,        // ray direction
			tmax,              // ray max range
			0                  // payload (location = 0)
		);

		summedPixelColor += prd.radiance;
		if (prd.done == 1 /*|| length(prd.attenuation) < 0.1*/)
			break;
	}
	
	int NUM_SAMPLES = constants.numSamples;
	int FRAME_NUMBER = constants.frameNumber;

	if (FRAME_NUMBER < NUM_SAMPLES) {
		vec3 oldRadiance = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
		vec3 newRadiance = (oldRadiance * (FRAME_NUMBER - 1) + summedPixelColor) / FRAME_NUMBER;
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(newRadiance, 0.0));
	}
	if (FRAME_NUMBER == 0) {
		imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(summedPixelColor, 0.0));
	}
}
